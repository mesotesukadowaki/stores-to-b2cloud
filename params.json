{"name":"Stores-to-b2cloud","tagline":"convert STORES order csv to B2cloud csv","body":"# STORES to B2クラウド\r\n\r\n[STORES](https://stores.jp)の[オーダーcsv](https://officialmag.stores.jp/entry/kaigyou/kinou-ordercsv)を、[ヤマト運輸 B2クラウド](http://www.kuronekoyamato.co.jp/ytc/campaign/B2cloud/)の[送り状基本レイアウトcsv](https://bmypage.kuronekoyamato.co.jp/bmypage/pdf//exchange.pdf)に変換します。\r\n\r\n現時点では、利用者がWebサーバを設置する必要があります。全ての処理はブラウザ側で行われるので、顧客データがWebに流れる心配がありません。また、ローカルPCのWebサーバでも問題なく動作します。\r\n\r\n![](stores-to-b2cloud.png)\r\n\r\n## 特徴\r\n\r\nオーダーcsvからB2クラウドのレイアウト変更は、B2クラウドの紐付け機能でもできますが、このプログラムでは以下のことができます。\r\n\r\n* 「依頼主」を原則として事業者に設定するが、STORESの「ギフト」で購入されたものは、購入者が依頼主に設定される。\r\n* 複数アイテムが含まれるひとつの注文を、B2クラウド向けにひとつにまとめる（B2クラウドの紐付け機能を使った場合は、そのままだと伝票が２つ出てしまう）\r\n* STORESのオーダーで「備考」を表示する。「備考」に時間指定などがあった場合、B2クラウド側で指定するときに利用できる。\r\n\r\n### STORESのB2クラウド対応との比較\r\n\r\n2020-6-17、[STORES自身がB2クラウドに対応](https://officialmag.stores.jp/entry/kaigyou/kinou-okurijo-yamato)しました👏\r\n\r\n現時点での差異は以下のとおりです。（STORES本体に現時点でははいっていない機能も、全部はいるといいなー）\r\n\r\n#### STORES-to-B2クラウドでは行っていないもの\r\n\r\n* STORES本体の機能では、「品名1」に購入アイテム名がはいります。STORES-to-B2クラウドでは固定の値が入ります。\r\n\r\n#### STORES本体機能では行っていないが、B2クラウド側で一括設定可能なもの\r\n\r\n以下の2点は、STORES-to-B2クラウドで事前に設定できます。\r\nSTORES本体の機能には実装されていませんが、B2クラウド側に読み込んだあとに一括設定すればOKです。\r\n\r\n* 送り状種別\r\n* 荷扱い\r\n* 発送日（STORES本体機能では当日固定で出力される）\r\n\r\n#### STORES本体機能で行っておらず、B2クラウド側でも一括設定ができないもの\r\n\r\n以下の2点は、ひとつずつSTORESのオーダー情報を確認しながらB2クラウド設定が必要になります。\r\n\r\n* STORES-to-B2クラウドでは、「ギフト」機能が使われた場合には、購入者が依頼主に設定されます。STORES本体の機能では、「依頼主」は固定の値です。\r\n* STORES-to-B2クラウドでは、「お届け予定eメール設定」を購入者のe-mail宛に設定します。STORES本体の機能では「お届け予定eメール設定」は設定されません。\r\n\r\n## ビルド\r\n\r\n[リリース](https://github.com/skoji/stores-to-b2cloud/releases)ページから、ビルド済みのzipをダウンロードできます。\r\n\r\nnode.jsを用意すれば、手元でビルドすることもできます。\r\n\r\n``` sh\r\nnpm install && npm run build\r\n```\r\n\r\n## 設定\r\n\r\n`default-data.json`を用意します。`dafault-data-template.json`をもとにしてください。\r\n\r\n``` json\r\n{\r\n  \"senderZip\" : \"1000001\",\r\n  \"senderAddress\" : \"東京都千代田区千代田1-1-1\",\r\n  \"senderAddress2\" : \"山田荘101\",\r\n  \"senderTel\" : \"090-1111-1111\",\r\n  \"senderName\" : \"山田たろう\",\r\n  \"customerId\" : \"1234567890\",\r\n  \"contentsName\" : \"計算機\",\r\n  \"handling1\" : \"精密機器\",\r\n  \"handling2\" : \"水濡厳禁\",\r\n  \"customerKind\" : \"\",\r\n  \"fareId\" : \"01\",\r\n  \"cool\" : 0,\r\n  \"sendKind\" : 0,\r\n  \"useScheduleEmail\" : true,\r\n  \"scheduleEmailMessage\" : \"このたびは、当社をご利用いただきありがとうございました。\\n今回ご注文頂きました商品を本日クロネコヤマトで発送いたしました。\"\r\n}\r\n```\r\n\r\n* `sender`で始まる要素は、デフォルトの依頼人です。\r\n* `contentsName`は品名にはいります。（STORESのアイテム名は今は反映させていません）\r\n* `handling1`・`handling2`は、荷扱い１・荷扱い２に入ります。精密機器・ワレ物注意・下積厳禁・天地無用・ナマモノ・水濡厳禁がB2クラウドのUIから指定できる既定値ですが、任意の文字列を受け付けます。\r\n* `customerId`は、B2クラウドの顧客コードです。\r\n* `customerKind`は、B2クラウドの請求先分類コードです。\r\n* `fareId`は、B2クラウドの運賃管理番号です。\r\n* `cool`はクール便区分です。0：通常 2:クール冷蔵 1:クール冷凍\r\n* `sendKind`は送り状種類です。0 : 発払い 3 : ＤＭ便 4 : タイム 5 : 着払い 7 : ネコポス 8 : 宅急便コンパクト\r\n* `useScheduleEmail`: お届け完了eメールを利用するかどうか設定します。trueで利用、falseで利用しない。\r\n* `scheduldEmailMessage`: お届け完了eメールのメッセージ部分テキストです。\r\n\r\n## 設置\r\n\r\nWebサーバ上の適切な場所に、`index.html`、`build/index.js`、`default-data.config`を設置してください。rsyncを使う場合は、`deploy-template.sh`も参考になるでしょう。\r\n\r\n## 使い方\r\n\r\nページを開き、「入力ファイル」に、STORESからダウンロードしたオーダーcsvを指定します。その他の設定を必要に応じて変更した上で、「変換」ボタンを押してください。\r\n「B2クラウド用csvダウンロード」のリンクが現れます。STORESオーダーで備考に書かれていることがあれば、その下の領域に表示されます。\r\n\r\nダウンロードしたcsvを「送り状発行システムB2クラウド」の「外部データから発行」で、「基本レイアウト(csv)」を選択した上でアップロードしてください。\r\n「取り込み開始行」は2行目です。\r\n\r\n## 利用上の注意点\r\n\r\n### オーダーのステータス\r\n\r\n* STORESでステータスが「未注文」または「入金待ち」のオーダーを変換します。「入金待ち」のオーダーについては画面上に警告メッセージを表示します。\r\n* 「キャンセル」や「完了」のデータが含まれていた場合は、変換処理全体を行いません。\r\n\r\n### 住所情報\r\n\r\nSTORESの住所情報は、B2クラウドの情報ほど細かく分かれていません。このため、「アパート・マンション名」が正しく抽出できません。\r\nカタカナが2文字以上続く場所から後を「アパート・マンション名」とみなして分割しますが、カタカナではないアパート名などで問題が発生します。\r\n\r\nB2クラウドで読み込み後に修正してください。\r\n\r\n## 変換後のcsvをExcelで開く\r\n\r\n文字コードがUTF-8のため、Excelで直接開くと文字化けします(Numbersでは問題ありません）。もしExcelで開きたい場合は、Excelの「外部データの取り込み」を利用してください。手順は以下の通りです。\r\n\r\n1. Excelで新規ファイルを開く。\r\n2. 「データ」タブの「テキストファイル」を押す。\r\n3. csvファイルを指定し、「データ取り出し」を押す。\r\n4. 「元のファイル」のプルダウンメニューで「Unicode（UTF-8)」を選択し、「次へ」を押す。\r\n5. 「区切り文字」で「カンマ」だけを選択する。（「タブ」などのチェックは外す）。「連続した区切り文字は一文字として扱う」のチェックが入っていないことを確認する。「文字列の引用符」は「\"」を選ぶ。「「次へ」を押す。\r\n6. 「列のデータ形式」は標準を選ぶ。「完了」を押す。\r\n7. 「OK」を押す。\r\n\r\n## ライセンスなど\r\n\r\n* [encoding.js](https://github.com/polygonplanet/encoding.js/)を使っています。（encoding.jsの[ライセンスはMIT](https://github.com/polygonplanet/encoding.js/blob/master/LICENSE)です）\r\n* 単純なコードで、改造は簡単だと思います。必要があればforkして変えていってください。\r\n* AGPL3.0であることにご留意ください。万が一別のライセンスをご希望の場合は[skoji@skoji.jp](mailto:skoji@skoji.jp)までお問い合わせください。\r\n\r\n\r\n\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}